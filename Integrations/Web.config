<?xml version="1.0"?>
<configuration>
  <!-- 
  
        Following are queries to be run against V1
        For each query to be defined, we need to define the section name below,
        and then add the XML below (see existing for examples).
        For any dynamic variables (Release Date, Program Name, etc.), the 
        format is to replace those within the JSON query with %%PARAM%%, and then
        define an appsetting parameter with the same name as the query.
        
        For example, see v1getStories below.  It uses two dynamic variables, Release Date and Program.
        In the query, we substitute in %%REL_DATE%% and %%PROG_NAME%% as the values.
        We then define an appsetting key called "v1getStories" (same name as the XML node that contains the story query), 
        and we enter a comma delimited list of the parameters.
        
        The wrapper will expect those parameters to be passed in on the querystring (see below) and will perform a substitution.
        
        For example: <url>/versionOne.ashx?action=v1getStories&REL_DATE='2014-11-27'&PROG_NAME='Sample: Next Release'
        
        New Queries can be added by adding the appropriate section key in the configSection below, the appropriate XML node containing 
        the query command (with possible subsitution variables), and the appsettings key with substitutions.
        
  -->
  <configSections>
    
    <section name="v1getImpactedSystems" type="System.Configuration.IgnoreSectionHandler" allowLocation="false" />
    <section name="v1getPrograms" type="System.Configuration.IgnoreSectionHandler" allowLocation="false" />
    <section name="v1getStories" type="System.Configuration.IgnoreSectionHandler" allowLocation="false" />
    <section name="v1getEpics" type="System.Configuration.IgnoreSectionHandler" allowLocation="false" />
  </configSections >
  
  <!-- Get Impacted Systems -->
  <v1getImpactedSystems>
    [{
    "from": "Story",
    "select": [
    "Name",
    "Custom_PrimarySystem.Name",
    "Custom_PrimarySystem2.Name",
    "Custom_SecondarySystem22.Name",
    "Custom_SecondarySystem32.Name",
    "Custom_SecondarySystem42.Name",
    "Custom_SecondarySystem5.Name"]
    },
    {
    "from": "Story",
    "select": [
    "Name",
    "Custom_PrimarySystem.Name",
    "Custom_PrimarySystem2.Name",
    "Custom_SecondarySystem22.Name",
    "Custom_SecondarySystem32.Name",
    "Custom_SecondarySystem42.Name",
    "Custom_SecondarySystem5.Name"]
    },
    {
    "from": "Epic",
    "select": [
    "Name",
    "Custom_PrimarySystem3.Name",
    "Custom_SecondarySystem.Name",
    "Custom_SecondarySystem2.Name",
    "Custom_SecondarySystem3.Name",
    "Custom_SecondarySystem4.Name"]
    },
    {
    "from": "Epic",
    "select": [
    "Name",
    "Custom_PrimarySystem3.Name",
    "Custom_SecondarySystem.Name",
    "Custom_SecondarySystem2.Name",
    "Custom_SecondarySystem3.Name",
    "Custom_SecondarySystem4.Name"]
    }]
  </v1getImpactedSystems>
  <!--
    Get Programs - single query - get the list of Programs 
  -->
  <v1getPrograms>
    {
    "from": "ScopeLabel",
    "select": [
      "Name"],
    "where": {}
    }
  </v1getPrograms>
  
  <!-- 
    Get Stories - the lists of Stories
    
    First query returns stories with explicit values set for Release Date and Program
    
    Second query returns stories (regardless of their program) that are children 
    of Epics that have explicit Release Date and Program
    -->
  <v1getStories>
    [{
    "from": "Story",
    "select": [
      "Name",
      "Description",
      "Number",
      "Custom_ReleaseDate"],
    "where": {
      "Super.Custom_ReleaseDate2": "%%REL_DATE%%",
      "Super.Scope.ScopeLabels.Name": "%%PROG_NAME%%"
    }
    },
    {
    "from": "Story",
    "select": [
      "Name",
      "Description",
      "Number",
      "Custom_ReleaseDate"],
    "where": {
      "Custom_ReleaseDate":"%%REL_DATE%%",
      "Scope.ScopeLabels.Name": "%%PROG_NAME%%"
    }
    }]
  </v1getStories>
  
  <!-- 
    Get Epics - lists of Epics
    
    First query returns Epics that are parents of Stories that have explicit 
    Release Date and Program.  The Epics must also be in the same program
    
    Second query returns Epics with explicit program and Release Date 
    -->
  <v1getEpics>
    [{
    "from": "Epic",
    "select": [
    "Name"],
    "filter": [
    "Subs:Story.Custom_ReleaseDate='%%REL_DATE%%'",
    "Subs:Story.Scope.ScopeLabels.Name='%%PROG_NAME%%'",
    "Scope.ScopeLabels.Name='%%PROG_NAME%%'"]
    },
    {
    "from": "Epic",
    "select": [
    "Name"],
    "where": {
    "Custom_ReleaseDate2": "%%REL_DATE%%",
    "Scope.ScopeLabels.Name": "%%PROG_NAME%%"
    }
    }]

  </v1getEpics>
    
  <appSettings>
    <!-- *************************************
              Version One Information      
         *************************************-->
   <!-- Version One base URL -->
    <add key="voURL" value="https://www16.v1host.com/SerenaSoftwareInc25/"/>

   <!-- Replacement Keys for the queries above
          Key names should match the XML node names containing queries above.
          Values are a comma delimited string
          These values should exist within the query defined above,
          and passed in on the query string to requests.
          Substitution will be performed at runtime.
    -->
    <add key="v1getStories" value="REL_DATE,PROG_NAME"/>
    <add key="v1getEpics" value="REL_DATE,PROG_NAME"/>
    
    <!-- Unique Field List key 
         The wrapper has the capability to return a single array of unique vaulues contained in an attribute list.
         For example, Epics have a Primary System, and 4 Secondary System fields.
                      Stories have a Primary System (different system field name from Epics), and 4 Secondary System
                      field (different system field name from Epics).  The desire is to have the query return a single 
                      unique list of impacted systems that combines values from all 8 fields.
    
        To activate this feature, you need to add two keys for each query
          1. Add a key with the name in the format of <queryname>_unqfieldlist.  The value of this key is not important
          2. Add a key with the name in the format of <queryname>_fields.  The value is a comma delimited list of system fields to combine
        
        For example, if you have defined a query named "v1getImpactedSystems" that returns collections of epics and stories, 
        each with 2 fields to combine, the values for the keys would be as follows:
        
        <add key="v1getImpactedSystems_unqfieldlist" value="1"/>
        <add key="v1getImpactedSystems_fields" value"Custom_PrimarySystem3.Name,Custom_PrimarySystem2.Name,Custom_SecondarySystem1.Name,Custom_SecondarySystem2.Name"/>
        
        Note that the query you define must have these fields defined in the "select" clause, and if you are returning list values you must specify .Name
        due to the list being a relationship to a separate record rather than simply an attribute value.
      
    -->
    <add key="v1getImpactedSystems_unqfieldlist" value="1"/>
    <add key="v1getImpactedSystems_fields" value="Custom_PrimarySystem.Name,Custom_PrimarySystem2.Name,Custom_SecondarySystem22.Name,Custom_SecondarySystem32.Name,Custom_SecondarySystem42.Name,Custom_SecondarySystem5.Name,Custom_PrimarySystem3,Custom_SecondarySystem,Custom_SecondarySystem2,Custom_SecondarySystem3,Custom_SecondarySystem4"/>

    <!-- Debug key.  If set to 1, the versionone.ashx page will output raw results
         rather than return a unique list of records  -->
    <add key="debugOut" value="0"/>
    
    
  </appSettings>
  <connectionStrings/>
  <!-- Set proxy info here, or if no proxy is used them comment this section out 
  <system.net>
    <defaultProxy>
      <proxy proxyaddress="http://localhost:8888/" />
    </defaultProxy>
  </system.net>
  -->
  <!--
    For a description of web.config changes for .NET 4.5 see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.5" />
      </system.Web>
   -->
      <system.web>
    <!-- 
            Visual Basic options:
            Set strict="true" to disallow all data type conversions 
            where data loss can occur. 
            Set explicit="true" to force declaration of all variables.
        -->
    <compilation debug="true" strict="false" explicit="true" targetFramework="4.5"/>
    <!--
      The <authentication> section enables configuration 
      of the security authentication mode used by 
      ASP.NET to identify an incoming user. 
    -->
    <authentication mode="Windows"/>
    <!--
       The <customErrors> section enables configuration 
       of what to do if/when an unhandled error occurs 
       during the execution of a request. Specifically, 
       it enables developers to configure html error pages 
       to be displayed in place of a error stack trace.

       <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
         <error statusCode="403" redirect="NoAccess.htm" />
         <error statusCode="404" redirect="FileNotFound.htm" />
       </customErrors>
    -->
    <pages controlRenderingCompatibilityVersion="4.0" clientIDMode="AutoID">
      <namespaces>
        <clear/>
        <add namespace="System"/>
        <add namespace="System.Collections"/>
        <add namespace="System.Collections.Generic"/>
        <add namespace="System.Collections.Specialized"/>
        <add namespace="System.Configuration"/>
        <add namespace="System.Text"/>
        <add namespace="System.Text.RegularExpressions"/>
        <add namespace="System.Linq"/>
        <add namespace="System.Xml.Linq"/>
        <add namespace="System.Web"/>
        <add namespace="System.Web.Caching"/>
        <add namespace="System.Web.SessionState"/>
        <add namespace="System.Web.Security"/>
        <add namespace="System.Web.Profile"/>
        <add namespace="System.Web.UI"/>
        <add namespace="System.Web.UI.WebControls"/>
        <add namespace="System.Web.UI.WebControls.WebParts"/>
        <add namespace="System.Web.UI.HtmlControls"/>
      </namespaces>
    </pages>
  </system.web>
  <!-- 
        The system.webServer section is required for running ASP.NET AJAX under Internet
        Information Services 7.0.  It is not necessary for previous version of IIS.
    -->
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="FSharp.Core" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
        <bindingRedirect oldVersion="0.0.0.0-4.3.0.0" newVersion="4.3.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>